/*
 * angular-formatter.js - v1.1.0
 * https://github.com/Avoran/js-text-formatter
 */
function Formatter(t){this.format=function(n){return r(n,_.defaults(t,{format:"",debug:!1}))};var r=function(t,o){var a=" "+o.format,i=new RegExp(/[^\\]([\d*]+)([SD])/),f=i.exec(a),c=a.search(i)+1,l=c?a.substring(1,c):a.substring(1);if(l=n(l),t=e(t,l),f){var s=u(f[1],f[2],t);l+=s.output,s.done&&(l+=r(s.remainingInput,_.defaults({format:a.substring(c-1).replace(f[0],"")},o)))}return o.debug&&console&&console.log&&(console.log("---------- avFormatter ----------"),console.log("avFormatter - input: "+t),console.log("avFormatter - output: "+l),console.log("avFormatter - format: "+a),console.log("--------- /avFormatter ----------")),l},n=function(t){return t.replace(/\\/g,"")},e=function(t,r){if(!r)return t;var n="^"+o(r[0]);return r=r.substring(1),_.forEach(r,function(t){n+=o(t)+"?"}),t.replace(new RegExp(n),"")},o=function(t){return _.includes(["\\","-","]"],t)&&(t="\\"+t),"["+t+"]"},u=function(t,r,n){var e={remainingInput:n,output:"",done:!1};return _.forEach(n,function(n){if(e.output.length==t)return e.done=!0;e.remainingInput=e.remainingInput.substring(1)," "!==n&&(parseInt(n)+""===n?"D"==r&&(e.output+=n):"S"==r&&(e.output+=n))}),e}}if(angular.module("av.format",[]).factory("AvFormatter",function(){return{get:function(t){return new Formatter(t)}}}).directive("avFormat",function(t){return{restrict:"A",require:"?ngModel",scope:{format:"@avFormat"},link:function(r,n,e,o){if(o){var u=t.get(r.format);o.$parsers.unshift(function(t){return u.format(t)}),n.blur(function(){var t=u.format(n.val());n.val(t),o.$setViewValue(t)})}}}}),"undefined"!=typeof module&&module.exports){var _=require("lodash");module.exports=Formatter}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
