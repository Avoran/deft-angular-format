/*
 * jquery-formatter.js - v1.1.2
 * https://github.com/Avoran/js-text-formatter
 */
function Formatter(t){this.format=function(r){return n(r,_.defaults(t,{format:"",debug:!1}))};var n=function(t,e){var u=" "+e.format,i=new RegExp(/[^\\]([\d*]+)([SD])/),f=i.exec(u),s=u.search(i)+1,c=s?u.substring(1,s):u.substring(1);if(c=r(c),t=o(t,c),f){var l=a(f[1],f[2],t);c+=l.output,l.done&&(c+=n(l.remainingInput,_.defaults({format:u.substring(s-1).replace(f[0],"")},e)))}return e.debug&&console&&console.log&&(console.log("---------- avFormatter ----------"),console.log("avFormatter - input: "+t),console.log("avFormatter - output: "+c),console.log("avFormatter - format: "+u),console.log("--------- /avFormatter ----------")),c},r=function(t){return t.replace(/\\/g,"")},o=function(t,n){if(!n)return t;var r="^"+e(n[0]);return n=n.substring(1),_.forEach(n,function(t){r+=e(t)+"?"}),t.replace(new RegExp(r),"")},e=function(t){return _.includes(["\\","-","]"],t)&&(t="\\"+t),"["+t+"]"},a=function(t,n,r){var o={remainingInput:r,output:"",done:!1};return _.forEach(r,function(r){if(o.output.length==t)return o.done=!0;o.remainingInput=o.remainingInput.substring(1)," "!==r&&(parseInt(r)+""===r?"D"==n&&(o.output+=r):"S"==n&&(o.output+=r))}),o}}if(function(t){"use strict";t.fn.avFormat=function(n){return this.each(function(){var r=t(this);if(!r.data("av-format-initialised")){r.data("av-format-initialised","true");var o=t.extend({},t.fn.avFormat.defaults,n),e=new Formatter(o);r.on("change keyup blur",function(){r.val(e.format(r.val()))})}})},t.fn.avFormat.defaults={format:"",debug:!1}}(jQuery),$(function(){$("[av-format]").each(function(){$(this).avFormat({format:$(this).attr("av-format")})})}),"undefined"!=typeof module&&module.exports){var _=require("lodash");module.exports=Formatter}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
