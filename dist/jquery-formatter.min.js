/*
 * jquery-formatter.js - v1.1.1
 * https://github.com/Avoran/js-text-formatter
 */
function Formatter(t){this.format=function(n){return r(n,_.defaults(t,{format:"",debug:!1}))};var r=function(t,e){var u=" "+e.format,i=new RegExp(/[^\\]([\d*]+)([SD])/),f=i.exec(u),s=u.search(i)+1,c=s?u.substring(1,s):u.substring(1);if(c=n(c),t=o(t,c),f){var l=a(f[1],f[2],t);c+=l.output,l.done&&(c+=r(l.remainingInput,_.defaults({format:u.substring(s-1).replace(f[0],"")},e)))}return e.debug&&console&&console.log&&(console.log("---------- avFormatter ----------"),console.log("avFormatter - input: "+t),console.log("avFormatter - output: "+c),console.log("avFormatter - format: "+u),console.log("--------- /avFormatter ----------")),c},n=function(t){return t.replace(/\\/g,"")},o=function(t,r){if(!r)return t;var n="^"+e(r[0]);return r=r.substring(1),_.forEach(r,function(t){n+=e(t)+"?"}),t.replace(new RegExp(n),"")},e=function(t){return _.includes(["\\","-","]"],t)&&(t="\\"+t),"["+t+"]"},a=function(t,r,n){var o={remainingInput:n,output:"",done:!1};return _.forEach(n,function(n){if(o.output.length==t)return o.done=!0;o.remainingInput=o.remainingInput.substring(1)," "!==n&&(parseInt(n)+""===n?"D"==r&&(o.output+=n):"S"==r&&(o.output+=n))}),o}}if(function(t){"use strict";t.fn.avFormat=function(r){return this.each(function(){var n=t(this);if(!n.data("av-format-initialised")){n.data("av-format-initialised","true");var o=t.extend({},t.fn.avFormat.defaults,r),e=new Formatter(o);n.on("change keyup blur",function(){n.val(e.format(n.val()))})}})},t.fn.avFormat.defaults={format:"",debug:!1}}(jQuery),$(function(){var t=$("[av-format]");t.avFormat({format:t.attr("av-format")})}),"undefined"!=typeof module&&module.exports){var _=require("lodash");module.exports=Formatter}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
